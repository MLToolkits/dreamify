name: Publish to PyPI

on:
  push:
    tags:
      - "v*"

jobs:
  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: "3.10"

      - name: Install dependencies for Black and isort
        run: |
          pip install black isort

      - name: Run isort to sort imports
        run: isort .

      - name: Run Black
        run: black .

      - name: Show diff if formatting was needed
        run: |
          git diff
          exit 0

  lint:
    runs-on: ubuntu-latest
    needs: format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: "3.10"

      - name: Install dependencies for Flake8
        run: pip install flake8

      - name: Run Flake8
        run: flake8 .

      - name: Show diff if linting was needed
        run: |
          git diff
          exit 0

  publish-build:
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: write
      id-token: write
    environment: PYPI

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache Poetry dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
            ~/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        if: steps.cache-dependencies.cache-hit != 'true'
        run: |
          python -m pip install -U pip poetry
          poetry --version
          poetry check --no-interaction
          poetry config virtualenvs.in-project true
          poetry install --no-interaction

      - name: Authenticate on PyPI using poetry
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

      - name: Publish to PyPI
        run: poetry publish --build

      - name: Build release distributions
        run: poetry build

      - name: Upload distributions as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ðŸš€ **New Release: ${{ github.ref_name }}** ðŸš€
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
